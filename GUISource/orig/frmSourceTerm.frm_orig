VERSION 5.00
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.2#0"; "COMDLG32.OCX"
Object = "{6B7E6392-850A-101B-AFC0-4210102A8DA7}#1.3#0"; "COMCTL32.OCX"
Object = "{5E9E78A0-531B-11CF-91F6-C2863C385E30}#1.0#0"; "MSFLXGRD.OCX"
Begin VB.Form frmSourceTerm 
   AutoRedraw      =   -1  'True
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Source Term"
   ClientHeight    =   7290
   ClientLeft      =   3450
   ClientTop       =   330
   ClientWidth     =   8895
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   9.75
      Charset         =   0
      Weight          =   400
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   Icon            =   "frmSourceTerm.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   ScaleHeight     =   7290
   ScaleWidth      =   8895
   Begin VB.CheckBox chkDaughtering 
      Caption         =   "Daughtering"
      Height          =   255
      Left            =   6600
      TabIndex        =   27
      ToolTipText     =   "Implies decay is also active"
      Top             =   5520
      Width           =   2025
   End
   Begin VB.CheckBox chkDecay 
      Caption         =   "Decay"
      Height          =   255
      Left            =   6600
      TabIndex        =   26
      Top             =   4920
      Width           =   1575
   End
   Begin VB.Frame fraIFX 
      Caption         =   "Iodine Chemical Fractions"
      Height          =   2295
      Left            =   840
      TabIndex        =   16
      ToolTipText     =   "Varies with source release location"
      Top             =   4320
      Width           =   4935
      Begin VB.OptionButton optVSB 
         Caption         =   "User"
         Height          =   375
         Index           =   2
         Left            =   3480
         TabIndex        =   25
         ToolTipText     =   "Type of release"
         Top             =   1560
         Width           =   975
      End
      Begin VB.TextBox txtIFX 
         Height          =   375
         Index           =   0
         Left            =   2040
         TabIndex        =   19
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   840
         Width           =   1095
      End
      Begin VB.TextBox txtIFX 
         Height          =   375
         Index           =   1
         Left            =   2040
         TabIndex        =   20
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   1200
         Width           =   1095
      End
      Begin VB.TextBox txtIFX 
         Height          =   375
         Index           =   2
         Left            =   2040
         TabIndex        =   21
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   1560
         Width           =   1095
      End
      Begin VB.OptionButton optVSB 
         Caption         =   "TID"
         Height          =   375
         Index           =   0
         Left            =   3480
         TabIndex        =   17
         ToolTipText     =   "Type of release"
         Top             =   840
         Width           =   975
      End
      Begin VB.OptionButton optVSB 
         Caption         =   "1465"
         Height          =   375
         Index           =   1
         Left            =   3480
         TabIndex        =   18
         ToolTipText     =   "Type of release"
         Top             =   1200
         Width           =   975
      End
      Begin VB.Label lblIFXSource 
         Height          =   255
         Left            =   135
         TabIndex        =   28
         ToolTipText     =   "varies with source release location"
         Top             =   270
         Width           =   4680
      End
      Begin VB.Label lblIFX 
         AutoSize        =   -1  'True
         Caption         =   "Aerosol: "
         Height          =   240
         Index           =   0
         Left            =   960
         TabIndex        =   24
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   900
         Width           =   795
      End
      Begin VB.Label lblIFX 
         AutoSize        =   -1  'True
         Caption         =   "Elemental: "
         Height          =   240
         Index           =   1
         Left            =   765
         TabIndex        =   23
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   1260
         Width           =   990
      End
      Begin VB.Label lblIFX 
         AutoSize        =   -1  'True
         Caption         =   "Organic: "
         Height          =   240
         Index           =   2
         Left            =   960
         TabIndex        =   22
         ToolTipText     =   "Values are between 0 and 1.0 and the 3 values must add to 1.0"
         Top             =   1620
         Width           =   795
      End
   End
   Begin VB.CommandButton cmdEdit 
      Caption         =   "&Edit"
      Height          =   305
      Left            =   3000
      TabIndex        =   15
      ToolTipText     =   "Restore original data"
      Top             =   3600
      Width           =   735
   End
   Begin VB.TextBox txtStartTime 
      Height          =   375
      Left            =   4920
      TabIndex        =   6
      ToolTipText     =   "Time from shutdown to start of radionuclide release"
      Top             =   1080
      Width           =   1575
   End
   Begin VB.TextBox txtDelay 
      Height          =   375
      Left            =   2760
      TabIndex        =   7
      ToolTipText     =   "Time from shutdown to accident initiation"
      Top             =   1080
      Width           =   1575
   End
   Begin VB.CommandButton cmdBrowseRFT 
      Caption         =   "Browse"
      Height          =   305
      Left            =   6120
      TabIndex        =   12
      Top             =   3600
      Width           =   975
   End
   Begin VB.CommandButton cmdBrowseNIF 
      Caption         =   "Browse"
      Height          =   305
      Left            =   4200
      TabIndex        =   11
      Top             =   3600
      Width           =   975
   End
   Begin VB.TextBox txtFraction 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   2565
      TabIndex        =   10
      Top             =   2135
      Width           =   975
   End
   Begin VB.ComboBox cboGridSelect 
      Appearance      =   0  'Flat
      CausesValidation=   0   'False
      Height          =   360
      ItemData        =   "frmSourceTerm.frx":0442
      Left            =   1225
      List            =   "frmSourceTerm.frx":0444
      Style           =   2  'Dropdown List
      TabIndex        =   9
      Top             =   2115
      Width           =   1335
   End
   Begin VB.TextBox txtPower 
      Height          =   375
      Left            =   720
      TabIndex        =   5
      ToolTipText     =   "Thermal Power of reactor"
      Top             =   1080
      Width           =   1455
   End
   Begin MSFlexGridLib.MSFlexGrid Grid 
      Height          =   1770
      Left            =   480
      TabIndex        =   3
      Top             =   1800
      Width           =   7935
      _ExtentX        =   13996
      _ExtentY        =   3122
      _Version        =   393216
      Rows            =   6
      Cols            =   6
      FixedCols       =   0
      AllowBigSelection=   0   'False
      FocusRect       =   0
      HighLight       =   0
      GridLinesFixed  =   1
      ScrollBars      =   2
      Appearance      =   0
      FormatString    =   "^Source|^Compartment|^Multiplier    |^Units|^ Inventory file             |^Release file                 "
   End
   Begin MSComDlg.CommonDialog CommonDialog 
      Left            =   120
      Top             =   6600
      _ExtentX        =   847
      _ExtentY        =   847
      _Version        =   393216
   End
   Begin VB.CommandButton cmdCancel 
      Caption         =   "&Reset"
      Height          =   375
      Left            =   7080
      TabIndex        =   2
      ToolTipText     =   "Restore original data"
      Top             =   360
      Width           =   1095
   End
   Begin ComctlLib.StatusBar StatusBar1 
      Align           =   2  'Align Bottom
      Height          =   375
      Left            =   0
      TabIndex        =   1
      Top             =   6915
      Width           =   8895
      _ExtentX        =   15690
      _ExtentY        =   661
      Style           =   1
      SimpleText      =   ""
      _Version        =   327682
      BeginProperty Panels {0713E89E-850A-101B-AFC0-4210102A8DA7} 
         NumPanels       =   1
         BeginProperty Panel1 {0713E89F-850A-101B-AFC0-4210102A8DA7} 
            Key             =   ""
            Object.Tag             =   ""
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdExit 
      Caption         =   "&OK"
      Height          =   375
      Left            =   7080
      TabIndex        =   0
      ToolTipText     =   "Save data and close"
      Top             =   960
      Width           =   1095
   End
   Begin VB.Label lblStartTime 
      Alignment       =   2  'Center
      Caption         =   "Start  Release Time"
      Height          =   240
      Index           =   0
      Left            =   4680
      TabIndex        =   14
      Top             =   840
      Width           =   2085
   End
   Begin VB.Label lblDelay 
      Alignment       =   2  'Center
      Caption         =   "Delay (hours)"
      Height          =   240
      Left            =   2640
      TabIndex        =   13
      Top             =   840
      Width           =   1845
   End
   Begin VB.Label lblPower 
      Alignment       =   2  'Center
      Caption         =   "Plant Power (MWt)"
      Height          =   240
      Left            =   480
      TabIndex        =   8
      Top             =   840
      Width           =   1905
   End
   Begin VB.Label lblST 
      Alignment       =   2  'Center
      BackStyle       =   0  'Transparent
      Caption         =   "Edit Source Term"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   13.5
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   -1  'True
         Strikethrough   =   0   'False
      EndProperty
      Height          =   345
      Index           =   1
      Left            =   720
      TabIndex        =   4
      Top             =   240
      Width           =   6345
   End
End
Attribute VB_Name = "frmSourceTerm"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Const EDGE = 3960
Const NifType1Name = "Ci/MWt"
Const NifType2Name = "Ci/cc"
Const NifType3Name = "Ci/hr"
Private tmpIFX(1 To MaxSourceTerm, 2) As Single
Private IfxIndex(1 To MaxSourceTerm) As Integer
Private FSO As FileSystemObject
Private NIFfiles As Dictionary
Private RFTfiles As Dictionary
Private SaveRFT As Collection
Private SaveNIF As Collection
Private DataModify As Boolean
Private IgnoreModify As Boolean
Private Startup As Boolean
Private Init As Boolean
Private TheFormEdit As Boolean
Private TheEditType As String
Private Const SM_CXVSCROLL = 2
Private PrevDelay As Single
Private PrevColumn As Integer
Private ToolMessage As Boolean
'Private HighlightedRow As Integer
'Private Highlighting As Boolean
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Private Sub ListCompartments()
Dim i As Integer

    With cboGridSelect
        .Clear
        
        For i = 1 To MaxCompartments
            If CompartmentArr(i).Name <> "Unused" Then
                .AddItem CompartmentArr(i).Name
                .ItemData(.NewIndex) = i
            End If
        Next
    End With
End Sub

Private Sub ShowSourceData()
Dim InputFiles As Folder
Dim Filename
Dim Buffer As String
Dim Table() As SourceTermEntry
Dim i As Integer, j As Integer
  
  With FSO
    If .FolderExists(StartupPath & "Defaults") Then
        Set InputFiles = .GetFolder(StartupPath & "Defaults")
        For Each Filename In InputFiles.Files
            Buffer = Filename
            LogSourceTermFile Buffer
        Next
    End If
  End With
  
  With SourceTerm
    If UBound(.SourceTermTable) > 0 Then
        If .SourceTermTable(1).CompartmentNumber > 0 Then
          cboGridSelect.Visible = False
          For i = 1 To MaxSourceTerm
              With .SourceTermTable(i)
                If .CompartmentNumber > 0 Then
                  Grid.RowData(i) = .CompartmentNumber
                  Grid.TextMatrix(i, 0) = i 'Source number
                  Grid.TextMatrix(i, 1) = .CompartmentNumber & "-" & CompartmentArr(.CompartmentNumber).Name
                  Grid.TextMatrix(i, 2) = .Fraction
                  For j = 0 To 2
                    tmpIFX(i, j) = .IFX(j)
                  Next
                  If .IFX(0) = 0.05 And .IFX(1) = 0.91 And .IFX(2) = 0.04 Then
                    IfxIndex(i) = 0
                  ElseIf .IFX(0) = 0.95 And .IFX(1) = 0.0485 And .IFX(2) = 0.0015 Then
                    IfxIndex(i) = 1
                  ElseIf (.IFX(0) + .IFX(1) + .IFX(2)) > 0 Then
                    IfxIndex(i) = 2
                  End If
                            
                  Buffer = SourceTerm.Files(.NifIndex + NIF)
                  If Buffer <> "" Then
                    If FSO.FileExists(Buffer) Then
                      LogSourceTermFile Buffer
                    End If
                    Grid.TextMatrix(i, 4) = FileTitle(Buffer)
                    j = ReadNifFile(Buffer)
                    Grid.TextMatrix(i, 3) = GetNifType(j)
                  End If
                  
                  Buffer = SourceTerm.Files(.RftIndex + RFT)
                  If Buffer <> "" Then
                    If FSO.FileExists(Buffer) Then
                      LogSourceTermFile Buffer
                    End If
                    Grid.TextMatrix(i, 5) = FileTitle(Buffer)
                  End If
                Else
                    'Break at first blank
                    Exit For
                End If
              End With
          Next
        Else
          cboGridSelect.Visible = True
        End If
    End If
  End With
End Sub

Private Sub ListNIF()
Dim NifKeys()
Dim i As Integer

    With cboGridSelect
        .Clear
        NifKeys = NIFfiles.Keys
        
        For i = 0 To UBound(NifKeys)
            'Add short name to combo box
            .AddItem NifKeys(i)
        Next
    End With

End Sub

Private Sub ListRFT()
Dim RftKeys()
Dim i As Integer

    With cboGridSelect
        .Clear
        RftKeys = RFTfiles.Keys
        
        For i = 0 To UBound(RftKeys)
            .AddItem RftKeys(i)
        Next
    End With
End Sub

Private Function GetFolder(Pathname) As String
    'Show location of the file, as path without filename, including backslash
    GetFolder = Left(Pathname, Len(Pathname) - Len(FSO.GetFileName(Pathname)))
End Function

Private Sub chkDaughtering_Click()
    If Not IgnoreModify Then
        DataModify = True
    End If
End Sub

Private Sub chkDecay_Click()
    If Not IgnoreModify Then
        If chkDecay = vbUnchecked Then
            chkDaughtering = vbUnchecked
            chkDaughtering.Enabled = False
        Else
            chkDaughtering.Enabled = True
        End If
        DataModify = True
    End If
End Sub

Private Sub cmdBrowseNIF_Click()
Dim FilePath As String
Dim ShortName As String

On Error GoTo NifError

    If PrevBrowsePath = "" Then
        FilePath = BrowseFile("nif")
    Else
        FilePath = BrowseFile("nif", PrevBrowsePath)
    End If
    
    If FilePath <> "" Then
        LogSourceTermFile FilePath
        ShortName = LCase(FileTitle(FilePath))
        If Grid.Col = 4 Then
            cboGridSelect.AddItem ShortName
        End If
        cboGridSelect.Visible = False
        Grid.Col = 4
        Grid.Text = ShortName
        ShowNifType (FilePath)
        PrevBrowsePath = FilePath
        DataModify = True
    End If
    Exit Sub
    
NifError:
    MsgBox Err.Description, vbExclamation, "BrowseNIF()"
    Resume Next
End Sub

Private Sub cmdBrowseRFT_Click()
Dim FilePath As String
Dim ShortName As String

On Error GoTo RftError

    If PrevBrowsePath = "" Then
        FilePath = BrowseFile("rft")
    Else
        FilePath = BrowseFile("rft", PrevBrowsePath)
    End If
    
    If FilePath <> "" Then
        LogSourceTermFile FilePath
        ShortName = LCase(FileTitle(FilePath))
        If Grid.Col = 5 Then
            cboGridSelect.AddItem ShortName
        End If
        cboGridSelect.Visible = False
        Grid.Col = 5
        Grid.Text = ShortName
        'ShowReleaseMode FilePath
        PrevBrowsePath = FilePath
        DataModify = True
    End If
    Exit Sub
    
RftError:
    MsgBox Err.Description, vbExclamation, "BrowseRFT()"
    Resume Next
End Sub

Private Sub cboGridSelect_Click()
Dim FilePath As String
Dim Selection As String
Dim CompartmentNumber As Integer
Dim i As Integer

    If Grid.Col = 0 Or Grid.Row = 0 Then
        Exit Sub
    End If
    
    With cboGridSelect
        Selection = .List(.ListIndex)
        Select Case Grid.Col
            Case 1
                'Save compartment number
                CompartmentNumber = .ItemData(.ListIndex)
                Grid.RowData(Grid.Row) = CompartmentNumber
                Selection = CompartmentNumber & "-" & CompartmentArr(CompartmentNumber).Name
                .Width = Grid.ColWidth(1)
                If Grid.TextMatrix(Grid.Row, 2) = "" Then
                    Grid.TextMatrix(Grid.Row, 2) = "1"
                End If
                If Grid.TextMatrix(Grid.Row, 0) = "" Then
                    Grid.TextMatrix(Grid.Row, 0) = "1"
                End If
                ShowIFXCaption
                For i = 0 To 2
                    If optVSB(i).Value = True Then
                        Exit For
                    End If
                Next

                If Grid.Row > 1 Then
                    If i = 2 Then
                        If tmpIFX(Grid.Row, 0) = 0 And tmpIFX(Grid.Row, 1) = 0 _
                                And tmpIFX(Grid.Row, 2) = 0 Then
                            tmpIFX(Grid.Row, 0) = tmpIFX(Grid.Row - 1, 0)
                            tmpIFX(Grid.Row, 1) = tmpIFX(Grid.Row - 1, 1)
                            tmpIFX(Grid.Row, 2) = tmpIFX(Grid.Row - 1, 2)
                        End If
                        txtIFX(0) = tmpIFX(Grid.Row, 0)
                        txtIFX(1) = tmpIFX(Grid.Row, 1)
                        txtIFX(2) = tmpIFX(Grid.Row, 2)
                    Else
                        optVSB_Click i
                    End If
                Else
                    optVSB_Click i
                End If
            Case 4
                FilePath = NIFfiles(Selection)
                ShowNifType (FilePath)
            Case 5
                FilePath = RFTfiles(Selection)
                'RFT - Check for TID/1465
                'ShowReleaseMode FilePath
        End Select
        
        If Selection = "" Then
            .Visible = False
        Else
            DataModify = True
        End If
        Grid.Text = Selection
    End With
    
End Sub

Private Sub cboGridSelect_DropDown()
    With cboGridSelect
        .Width = Grid.ColWidth(Grid.Col) + Grid.RowHeight(0)
    End With
End Sub

Private Function BrowseFile(Ext As String, Optional Name) As String
Dim Extension As String
Dim i As Integer

On Error GoTo errorhandler
 
 IgnoreModify = True 'JCK
 
 With CommonDialog
    If IsMissing(Name) Then
        .InitDir = StartupPath + "Defaults"
    ElseIf Right(Name, 1) = "\" Then
        .InitDir = Left(Name, Len(Name) - 1)
    Else
        i = InStrRev(Name, "\")
        If i > 1 Then
            .InitDir = Left(Name, i - 1)
        Else
            .InitDir = StartupPath + "Defaults"
        End If
    End If
    .Filename = ""
    .CancelError = True
  
    If Ext = "nif" Then
      'Show NIF files if that column is selected
      .filter = "Nuclide inventory files(*.nif)|*.nif|Release fractions and timing(*.rft)|*.rft"
    Else
      .filter = "Release fractions and timing(*.rft)|*.rft|Nuclide inventory files(*.nif)|*.nif"
    End If
    
    .Flags = cdlOFNFileMustExist Or cdlOFNHideReadOnly
    .DialogTitle = "Select " & Ext & " file"
    .ShowOpen
    
    i = InStrRev(.Filename, "\")
    If i > 1 Then
      PrevBrowsePath = Left(.Filename, i - 1)
    End If
    BrowseFile = .Filename
 End With
 
BrowseExit:
 IgnoreModify = False
 Exit Function
 
errorhandler:
If Err.Number = CancelSelected Then
    BrowseFile = ""
ElseIf Err.Number <> 0 Then
    MsgBox Err.Description, vbExclamation, "BrowseFile()"
End If
Resume BrowseExit
End Function

Private Sub ShowNifType(FilePath As String)
Dim Buffer As String
Dim result As Integer

    result = ReadNifFile(FilePath)
    
    With Grid
        Buffer = GetNifType(result)
        .TextMatrix(.Row, 3) = Buffer
    End With
End Sub

Private Function GetNifType(nType As Integer) As String
'Returns descriptive name of file type
Dim Buffer As String

    Select Case nType
        Case 0
            Buffer = "None"
        Case 1
            Buffer = NifType1Name
        Case 2
            Buffer = NifType2Name
        Case 3
            Buffer = NifType3Name
    End Select
    GetNifType = Buffer
End Function

Private Function NifID(NifName As String) As Integer
'Returns numeric file type index
    Select Case NifName
        Case NifType1Name 'Ci/MWt
          NifID = 1
        Case NifType2Name 'Ci/cc
          NifID = 2
        Case NifType3Name 'Ci/hr
          NifID = 3
        Case Else
          NifID = 1    'Default type 1
    End Select
End Function

Private Sub cboGridSelect_LostFocus()
    cboGridSelect.Width = Grid.ColWidth(Grid.Col)
End Sub

Private Sub cmdCancel_Click()
Dim i As Integer, j As Integer

  IgnoreModify = True
  
  InitControls
  NIFfiles.RemoveAll
  RFTfiles.RemoveAll
  
  With Grid
    For i = 1 To .Rows - 1
      .Row = i
      .Col = 0
      .CellAlignment = flexAlignCenterCenter
      .CellBackColor = &HE0E0E0
      .Col = 1
      .CellAlignment = flexAlignLeftCenter
      .Col = 2
      .CellAlignment = flexAlignCenterCenter
      .Col = 3
      .CellAlignment = flexAlignLeftCenter
      .Col = 4
      .CellAlignment = flexAlignLeftCenter
      .Col = 5
      .CellAlignment = flexAlignCenterCenter
    Next
    
    txtFraction = ""
    For i = 1 To .Rows - 1
        For j = 0 To 5
            .TextMatrix(i, j) = ""
        Next
    Next
  
    For i = 1 To MaxSourceTerm
      For j = 0 To 2
        tmpIFX(i, j) = 0
      Next
      IfxIndex(i) = 0
    Next
    
    ShowSourceData
    .Row = 1
    .Col = 1
    If .Text <> "" Then
        ShowFractions
    End If
  End With
  
  Init = True
  optVSB(SourceTerm.DcfType) = True
  Init = False
  
  cmdEdit.Enabled = False
  PrevColumn = -1
  DataModify = False
  IgnoreModify = False
End Sub

Private Sub cmdEdit_Click()
    
    'We decided not to allow editing a file unless it's displayed in the Source Term table
    'If Grid.text = "" Then
    '    If Grid.Col = 3 Then
    '        EditFile BrowseFile("nif")
    '    ElseIf Grid.Col = 4 Then
    '        EditFile BrowseFile("rft")
    '    End If
    'Else
        If Grid.Col = 4 Then
            Me.Tag = ""
            EditFile NIFfiles(Grid.Text)
        ElseIf Grid.Col = 5 Then
            Me.Tag = ""
            EditFile RFTfiles(Grid.Text)
        Else
            Exit Sub
        End If
        
        If Me.Tag <> "" Then
            LogSourceTermFile Me.Tag
            Grid.Text = FileTitle(Me.Tag)
            Grid_Click
            Me.Tag = ""
        End If
    'End If
End Sub

Private Sub cmdExit_Click()
 
 IgnoreModify = False
 
 If txtFraction.Visible Then
    With Grid
        .TextMatrix(.Row, 2) = txtFraction.Text
        txtFraction.Visible = False
    End With
 End If
 
 With SourceTerm
    If .Files(RFT) <> "" And .Files(NIF) <> "" Then
        With frmRadtrad.cmdSTEdit
            If .BackColor = RedButton Then
                .BackColor = vbButtonFace
            End If
        End With
    End If
 End With
 
 Unload Me
End Sub

Private Sub EditFile(Filename As String)
    If Filename <> "" Then
        If FSO.FileExists(Filename) Then
            Load frmTxtEdit
            With frmTxtEdit
                .Dir1 = StartupPath & "Defaults"
                .CommonDialog1.InitDir = .Dir1
                .Filename = Filename
                .Tag = Filename
                .LoadAFile
                .Show vbModal
            End With
            Exit Sub
        End If
        MsgBox "Can't find " & Filename, vbInformation, "File Not Found"
    End If
End Sub

Private Sub Form_Activate()

    If Not Startup Then
        Startup = True
        With SourceTerm.SourceTermTable(1)
            If .CompartmentNumber > 0 Then
                Grid.Row = 1
                ShowFractions
    '            HighlightRow 1
            End If
        End With
        txtPower.SetFocus
    End If
End Sub

Private Sub Form_Load()
Dim ScrollbarWidth As Long
Dim FileColumnWidth As Long
Dim i As Integer

On Error GoTo LoadError

  InitControls

  ScrollbarWidth = GetSystemMetrics(SM_CXVSCROLL)
  
  With Grid

    .Rows = MaxSourceTerm + 1
    .Height = .RowHeight(0) * 6
    Set Me.Font = .Font
    .ColWidth(0) = 720
    .ColWidth(1) = CaseNameWidth
    .ColWidth(3) = Me.TextWidth(" Ci/MWt  ")
    FileColumnWidth = .Width - 720 - .ColWidth(0) - .ColWidth(1) - .ColWidth(2) _
                        - (ScrollbarWidth * (Screen.TwipsPerPixelX + 1))
    .ColWidth(4) = FileColumnWidth / 2
    .ColWidth(5) = .ColWidth(4)
    
    cmdBrowseNIF.Left = .Left + .ColWidth(0) + .ColWidth(1) + .ColWidth(2) + .ColWidth(3) + (.ColWidth(4) / 2) - (cmdBrowseNIF.Width / 2)
    cmdBrowseRFT.Left = .Left + .ColWidth(0) + .ColWidth(1) + .ColWidth(2) + .ColWidth(3) + .ColWidth(4) + (.ColWidth(5) / 2) - (cmdBrowseRFT.Width / 2)
    cmdEdit.Left = cmdBrowseRFT.Left - (cmdBrowseNIF.Left + cmdBrowseNIF.Width) / 2
    
    Init = True
    For i = 1 To .Rows - 1
        .Row = i
        .Col = 0
        .CellAlignment = flexAlignCenterCenter
        .CellBackColor = &HE0E0E0
        .Col = 1
        .CellAlignment = flexAlignLeftCenter
        .Col = 2
        .CellAlignment = flexAlignCenterCenter
        .Col = 3
        .CellAlignment = flexAlignLeftCenter
        .Col = 4
        .CellAlignment = flexAlignLeftCenter
        .Col = 5
        .CellAlignment = flexAlignCenterCenter
    Next
    
    .Row = 1
    .Col = 1
    .Text = ""
    txtFraction.Height = .RowHeight(0)
  End With
  
  optVSB(SourceTerm.DcfType) = True
  Init = False
  
  cboGridSelect.Width = Grid.ColWidth(1)
  
  txtIFX(0).Tag = "sum"
  txtIFX(1).Tag = "sum"
  txtIFX(2).Tag = "sum"
  
  Set FSO = New FileSystemObject
  Set RFTfiles = New Dictionary
  Set NIFfiles = New Dictionary
  
  ListCompartments
  ShowSourceData
  
  cmdEdit.Enabled = False
  Startup = False
  PrevColumn = -1
  ToolMessage = False
  'Highlighting = False
  DataModify = False
  Exit Sub
  
LoadError:
    MsgBox Err.Description, vbExclamation, "frmSourceTerm.Load()"
End Sub

'This killed combo box action
'Private Sub HighlightRow(Number As Integer)
'Dim CurrentRow As Integer
'Dim CurrentCol As Integer
'Dim i As Integer

'    Highlighting = True
'    With Grid
'        CurrentRow = .Row
'        CurrentCol = .Col
        
'        If HighlightedRow > 0 Then
'            .Row = HighlightedRow
'            For i = 1 To .Cols - 1
'                .Col = i
'                .CellBackColor = vbWindowBackground
'            Next
'        End If
        
'        .Row = Number
'        For i = 1 To .Cols - 1
'            .Col = i
'            .CellBackColor = &HE0E0E0
'        Next
'        .Row = CurrentRow
'        .Col = CurrentCol
'    End With
    
'    HighlightedRow = Number
'    Highlighting = False
'End Sub

Private Sub Form_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If PrevColumn >= 0 Then
        Unload frmToolMessage
        ToolMessage = False
        PrevColumn = -1
    End If
End Sub

Private Sub Form_Unload(cancel As Integer)
    If ToolMessage Then
        Unload frmToolMessage
    End If
    Set FSO = Nothing
End Sub

Private Sub Grid_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Dim Left As Single
Dim Check As String
Dim Col5 As Single
Dim i As Integer


    Left = 0
    With Grid
        For i = 0 To .Cols - 1
            Left = Left + .ColWidth(i)
            If X <= Left Then
                If PrevColumn = i Then
                    Exit For
                Else
                    Load frmToolMessage
                    'Show message appropriate to column
                    With frmToolMessage
                        .Top = Me.Top + Grid.Top + Y + (Grid.RowHeight(0) * 2)
                        .Left = Me.Left + Grid.Left + X
                        PrevColumn = i
                        
                        Select Case i
                            Case 0
                                .Message = "Source sequence number"
                            Case 1
                                .Message = "Iodine Chemical Fractions vary with release"
                            Case 2
                                .Message = "Used to increase inventory, for example 60 for a SGTR"
                            Case 3
                                .Message = "Value comes from inventory file (Ci/MWt, Ci/hr, or Ci/cc)"
                            Case 4
                                If Y < Grid.RowHeight(0) And Grid.Col = 4 Then
                                    If cboGridSelect.Visible And (cboGridSelect.ListIndex >= 0) Then
                                        Check = NIFfiles(cboGridSelect.List(cboGridSelect.ListIndex))
                                    End If
                                End If
                                If Check = "" Then
                                    .Message = "Must match nuclide order of DCF file"
                                Else
                                    .Message = Check
                                    .Timer1.Interval = 10000
                                End If
                            Case 5
                                If Y < Grid.RowHeight(0) And Grid.Col = 5 Then
                                    If cboGridSelect.Visible And (cboGridSelect.ListIndex >= 0) Then
                                        Check = RFTfiles(cboGridSelect.List(cboGridSelect.ListIndex))
                                    End If
                                End If
                                If Check = "" Then
                                    .Message = "Must match nuclide order of DCF file"
                                Else
                                    .Message = Check
                                    .Timer1.Interval = 10000
                                End If
                        End Select
                    End With
                    ToolMessage = True
                    Exit For
                End If
            End If
        Next
    End With
End Sub

Private Sub optDD_Click(Index As Integer)
  DataModify = True
  With SourceTerm
    .DecayDaughter = Index
  End With
End Sub

Private Sub optVSB_Click(Index As Integer)
Dim i As Integer

  If Not Init Then
    Select Case Index
       Case 0: 'tid fractions
          txtIFX(0) = "0.0500"
          txtIFX(1) = "0.9100"
          txtIFX(2) = "0.0400"
       Case 1: '1465 fractions
          txtIFX(0) = "0.9500"
          txtIFX(1) = "0.0485"
          txtIFX(2) = "0.0015"
       Case 2 'User fractions
          txtIFX(0) = "0.0000"
          txtIFX(1) = "0.0000"
          txtIFX(2) = "0.0000"
    End Select
    DataModify = True
    
    For i = 0 To 2
        'Ver 3.10 JCK 11/2005
        tmpIFX(Grid.Row, i) = CSng(txtIFX(i))
    Next
    
    'This records the option button pressed for this row
    IfxIndex(Grid.Row) = Index
  End If

End Sub

Private Sub LogSourceTermFile(FilePath As String)
'Files are shown in the table without path info, so save full path indexed by filename
'We must be able to retrieve the full path to save the table data
Dim Ext As String
Dim Filename As String
Dim Key As String

On Error GoTo LogError

    Filename = LCase(FilePath)
    Ext = FSO.GetExtensionName(Filename)
    Key = FileTitle(Filename)
    
    If LCase(Ext) = "rft" Then
        With RFTfiles
            If .Exists(Key) Then
                .Remove Key 'User Browsed for same file, different path
            End If
            .Add Key, Filename
        End With
    End If
    
    If LCase(Ext) = "nif" Then
        With NIFfiles
            If .Exists(Key) Then
                .Remove Key 'User Browsed for same file, different path
            End If
            .Add Key, Filename
        End With
    End If
    Exit Sub
    
LogError:
    MsgBox Err.Description, vbExclamation, "LogSourceTermFile()"
End Sub

Private Sub Form_QueryUnload(cancel As Integer, UnloadMode As Integer)
Dim i As Integer
Dim Reply As VbMsgBoxResult

    If DataModify And Not IgnoreModify Then
        cancel = EditData
        If cancel = 0 Then
            If val(txtPower) = 0 Then
                Reply = MsgBox("Plant Power must have a value" & vbCrLf _
                                & "Exit Source Term anyway?", vbInformation Or vbYesNo, "Data Required")
                If Reply = vbNo Then
                    cancel = 1
                End If
            End If
        End If
        If cancel = 0 Then
            cancel = SaveData
            If cancel = 0 Then frmRadtrad.SaveState True
        End If
    End If
End Sub

Private Sub Form_Resize()
 If WindowState = vbNormal Then
  Left = frmRadtrad.Left + EDGE
  Top = frmRadtrad.Top + 3000
  AdjustToScreen Me
 End If
End Sub

Private Sub Grid_Click()
Dim i As Integer

    'If Highlighting Then Exit Sub
    
    With Grid
        Select Case .Col
            Case 1
                ListCompartments
                ShowList
                cmdEdit.Enabled = False
                .TextMatrix(.Row, 0) = Format(.Row)
                    
            Case 2
                txtFraction.Visible = True
                cboGridSelect.Visible = False
                cmdEdit.Enabled = False
            Case 3
                cmdEdit.Enabled = False
            Case 4
                ListNIF
                ShowList
                cmdEdit.Enabled = True
            Case 5
                ListRFT
                ShowList
                cmdEdit.Enabled = True
        End Select
        
        If .TextMatrix(.Row, 1) = "" Then
            lblIFXSource.Caption = ""
        ElseIf .Row > 0 Then
            ShowFractions
'            HighlightRow .Row
        End If
        
    End With
End Sub

Private Sub ShowFractions()
Dim i As Integer

    ShowIFXCaption
    For i = 0 To 2
        txtIFX(i) = Format(tmpIFX(Grid.Row, i), "0.0000")
    Next
    Init = True
    optVSB(IfxIndex(Grid.Row)) = True
    Init = False
End Sub

Private Sub ShowIFXCaption()
    With Grid
        lblIFXSource.Caption = "for Source #" & .Row _
                                & ", Compartment " & .TextMatrix(.Row, 1)
    End With
End Sub

Private Sub ShowList()
Dim i As Integer

    With cboGridSelect
        For i = 0 To .ListCount - 1
            If .List(i) = Grid.Text Then
                .ListIndex = i
                Exit For
            End If
        Next
        .Visible = True
    End With
End Sub

Private Sub Grid_EnterCell()
Dim i As Integer

    With Grid
        If .Col = 2 Then
            If .Text = "" Then
                If .TextMatrix(.Row, 1) <> "" Then
                    txtFraction = 1
                End If
            Else
                txtFraction.Text = .Text
            End If
        ElseIf .Text <> "" Then
            With cboGridSelect
                For i = 0 To .ListCount - 1
                    If .Text = .List(i) Then
                        .ListIndex = i
                        Exit For
                    End If
                Next
            End With
        End If
    End With
End Sub

Private Sub Grid_LeaveCell()
    With Grid
        If .Col = 2 Then
            .Text = txtFraction.Text
            txtFraction.Text = ""
        Else
            cboGridSelect.Visible = False
        End If
    End With
End Sub

Private Sub Grid_LostFocus()
    With Grid
        If .Col = 2 Then
            If txtFraction = "" Then
                .Text = "1"
            Else
                .Text = txtFraction.Text
            End If
        End If
    End With
End Sub

Private Sub Grid_RowColChange()

    If Init Then Exit Sub
    
    With Grid
        If .Col = 2 Then
            cboGridSelect.Visible = False
            txtFraction.Top = .Top + .CellTop
            txtFraction.Left = .Left + .CellLeft
            txtFraction.Width = .CellWidth
            txtFraction.Visible = True
            txtFraction.SetFocus
        ElseIf .Col > 0 Then
            txtFraction.Visible = False
            cboGridSelect.Top = .Top + .CellTop
            cboGridSelect.Left = .Left + .CellLeft
            cboGridSelect.Width = .CellWidth
        Else
            cboGridSelect.Visible = False
        End If
    End With
End Sub

Public Function SaveData() As Integer
Dim Table As String
Dim Buffer As String
Dim Reply As VbMsgBoxResult
Dim AddError As Boolean
Dim i As Integer, j As Integer
Dim temp As Single, Index As Integer

On Error GoTo SaveError

  Set SaveRFT = New Collection
  Set SaveNIF = New Collection
  AddError = False
  SaveData = 0
  j = 0
  
  With Grid
    For i = 1 To Grid.Rows - 1
        If .TextMatrix(i, 1) <> "" Then
            j = j + 1
        End If
    Next
  End With
  
  With SourceTerm
    'Clear existing files, except DCF
    For i = RFT To TotalSourceFiles
        .Files(i) = ""
    Next
    
    If j > 0 Then
      For i = 1 To UBound(.SourceTermTable)
        With .SourceTermTable(i)
          If Grid.TextMatrix(i, 1) <> "" Then
            .CompartmentNumber = Grid.RowData(i)
          End If
          If Grid.TextMatrix(i, 2) <> "" Then
            .Fraction = CSng(Grid.TextMatrix(i, 2))
          End If
          If Grid.TextMatrix(i, 4) <> "" Then
            Index = AddFile(Grid.TextMatrix(i, 4), NIF)
            If Index > 0 Then 'JCK 8/2006
                'NifIndex tells where this file is stored in the SourceTerm.Files array
                .NifIndex = Index - NIF
            Else
                If Index = -1 Then
                    AddError = True 'Message already displayed
                End If
            End If

          End If
          If Grid.TextMatrix(i, 5) <> "" Then
            Index = AddFile(Grid.TextMatrix(i, 5), RFT)
            If Index > 0 Then 'JCK 8/2006
                'RftIndex identifies which NIF file is associated with this RFT file
                .RftIndex = Index - RFT
            Else
                If Index = -1 Then
                    AddError = True 'Message already displayed
                End If
            End If
          End If
          .NifType = NifID(Grid.TextMatrix(i, 3))
          
          'Ver 3.10 JCK 11/2005
          temp = 0
          For j = 0 To 2 'Check for sum = 1
            temp = temp + tmpIFX(i, j)
          Next
            
          If temp > 0 Then
            If temp > 1.000001 Or temp < 0.999999 Then
              Grid.Row = i
              ShowFractions
              MsgBox "Error in Source Term #" & i & vbCrLf _
                      & "Iodine fractions must sum to 1", vbInformation, "Save Error"
              SaveData = 1 'Cancel Unload
              Exit Function
            End If
          
            For j = 0 To 2
              .IFX(j) = tmpIFX(i, j)
            Next
          Else
            For j = 0 To 2
              .IFX(j) = 0
            Next
          End If
        End With
      Next
    End If
  
    If SaveRFT.Count > LastRFTFile - DCF Then
      MsgBox "Maximum " & LastRFTFile - DCF & " RFT files", vbInformation, "Save Error"
      SaveData = 1 'Cancel Unload
      Exit Function
    ElseIf SaveNIF.Count > TotalSourceFiles - LastRFTFile Then
      MsgBox "Maximum " & TotalSourceFiles - LastRFTFile & " NIF files", vbInformation, "Save Error"
      SaveData = 1 'Cancel Unload
      Exit Function
    ElseIf AddError Then 'AddFile() error - JCK 8/2006
      SaveData = 1 'Cancel Unload
      Exit Function
    Else
        'Find RFT files
        If SaveRFT.Count > 0 Then
          For i = 0 To SaveRFT.Count - 1
              .Files(RFT + i) = SaveRFT(i + 1)
          Next
        End If
        
        'Find NIF files
        If SaveNIF.Count > 0 Then
          For i = 0 To SaveNIF.Count - 1
            .Files(NIF + i) = SaveNIF(i + 1)
          Next
        End If
    End If
  
    .PlantPowerMwts = CSng(txtPower)
    .StartTime = CSng(txtStartTime)
    'New 11/17/05 - JCK
    If chkDecay = vbUnchecked Then
      .DecayDaughter = 0
    ElseIf chkDaughtering = vbUnchecked Then
        .DecayDaughter = 1
    Else
      .DecayDaughter = 2
    End If
     
    '.DecayDaughter = 0
    
'    For i = 0 To 2
'     'If optDD(i) = True Then
'      '  .DecayDaughter = i
'      'End If
      
'      If txtIFX(i) <> "" Then
'        .IFX(i) = CSng(txtIFX(i).Text)
'      End If
'    Next i
    
    For i = 0 To 2
        If optVSB(i) Then
            .DcfType = i
            Exit For
        End If
    Next
    
    If i < 3 Then
        If i < 2 Then
            j = i
        Else
            j = 3
        End If
    Else
        j = 0
    End If
    .FileChoice = j
    
    ' Belcourt added method to update all time data for the
    ' change in the delay time
    Dim deltaDelay As Single
    
    deltaDelay = val(txtDelay) - .DelayTime
    .DelayTime = val(txtDelay)
  End With
  
    If (deltaDelay <> 0) Then
        ' Adjust times for all pathways
        For i = 1 To MaxPathways

            ' See if this pathway is active
            If (PathwayArr(i).Active = True) Then

                ' Brockman model
                With PathwayArr(i).TM0Piping.BrockmannA
                    For j = 1 To .Count
                        .times(j) = .times(j) + deltaDelay
                    Next j
                End With
        
                ' Not sure what this one is
                With PathwayArr(i).TM0Piping
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With

                ' Not sure ...
                With PathwayArr(i).TM1Filter
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                    .StopTime = .StopTime + deltaDelay
                    
                    .FailureData(1) = .FailureData(1) + deltaDelay
                    For j = 2 To 5
                        If .FailureData(j) > 0 Then
                            .FailureData(j) = .FailureData(j) + deltaDelay
                        End If
                    Next
                End With
            
                ' Not sure ...
                With PathwayArr(i).TM2Supo
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
            
                ' Not sure ...
                With PathwayArr(i).TM3Leak
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
            End If

        ' End loop over pathways
        Next i

        ' Loop over the number of compartments
        For i = 1 To MaxCompartments

            ' See if the compartment is used
            If (CompartmentArr(i).Type > 0) Then

                ' Not sure ...
                With CompartmentArr(i).F0Sprays
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
    
                ' Not sure ...
                With CompartmentArr(i).F0Sprays.Powers
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
    
                ' Not sure ...
                With CompartmentArr(i).F1ReFilters
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                    .FailureData(1) = .FailureData(1) + deltaDelay
                    For j = 2 To 5
                    
                    Next
                    .StopTime = .StopTime + deltaDelay
                End With
                
                ' Not sure ...
                With CompartmentArr(i).F2Deposition
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
    
                ' Not sure ...
                With CompartmentArr(i).F2Deposition.Henry
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
    
                ' Not sure ...
                With CompartmentArr(i).F3OPool
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
                
                ' Not sure ...
                With CompartmentArr(i).F3OPool.Powers
                    For j = 1 To .Count
                       .times(j) = .times(j) + deltaDelay
                    Next j
                End With
            End If

        ' End loop over number of compartments
        Next i

        ' Loop over the dose locations
        For i = 1 To MaxDoses
            With DoseLocationArr(i)
                'With .dlXQ
                '    For j = 1 To .Count
                '       .times(j) = .times(j) + deltaDelay
                '    Next j
                'End With
                With .dlBR
                    If .Model = 1 Then
                        For j = 1 To .Count
                           .times(j) = .times(j) + deltaDelay
                        Next j
                    End If
                End With
                With .dlOccupy
                    If .Model = 1 Then
                        For j = 1 To .Count
                           .times(j) = .times(j) + deltaDelay
                        Next j
                    End If
                End With
            End With
        ' End loop over maximum number of dose locations
        Next i
        
        'Path-dependent X/Q
        For i = 1 To UBound(PathXQArr)
            With PathXQArr(i).dlXQ
                If .Model = 1 Then
                    For j = 1 To .Count
                        .times(j) = .times(j) + deltaDelay
                    Next
                End If
            End With
        Next
        
        ' Calculational supplemental time control
        With CalcOptions
          With .SupplementalTimes
            For i = 1 To .Count
              .CalTimes(i) = .CalTimes(i) + deltaDelay
            Next i
          End With
          .EndTime = .EndTime + deltaDelay
        End With

    ' Delay time was changed
    End If
    Exit Function
  
SaveError:
  MsgBox Err.Description, vbExclamation, "Save Error"
End Function

Private Function AddFile(FileKey As String, Category As Long) As Integer
'FileKey argument is short name (no path) which is key to full path name in dictionary
'Add to collection. No harm if you try more than once
'Collections will be used to determine how many of each type of file were specified
Dim Keys()
Dim Start As Integer
Dim Last As Integer
Dim FullPath As String
Dim i As Integer, j As Integer

On Error GoTo Exists

    Select Case Category
        Case RFT
            FullPath = RFTfiles(FileKey)
            Keys = RFTfiles.Keys
            'Add method causes error for duplicate
            SaveRFT.Add FullPath, FileKey
        Case NIF
            FullPath = NIFfiles(FileKey)
            Keys = NIFfiles.Keys
            'Add method causes error for duplicate
            SaveNIF.Add FullPath, FileKey
    End Select

Duplicate:
    For i = 0 To UBound(Keys)
        If Keys(i) = FileKey Then
            Select Case Category
                Case RFT
                    Start = RFT
                    Last = LastRFTFile
                Case NIF
                    Start = NIF
                    Last = TotalSourceFiles
            End Select
            Exit For
        End If
    Next
               
    For j = Start To Last
        If SourceTerm.Files(j) = FullPath Then
            AddFile = j
            Exit Function
        End If
    Next
    
    For j = Start To Last
        If SourceTerm.Files(j) = "" Then
            SourceTerm.Files(j) = FullPath
            AddFile = j
            Exit Function
        End If
    Next
    
    'NIF or RFT section full
    AddFile = 0
    Exit Function
    
Exists:
    With Err
        If .Number = 457 Then
            'Harmless error trying to add a file already in the collection
            Resume Duplicate
        Else
            MsgBox .Description, vbExclamation, "AddFile()"
        End If
    End With
    AddFile = -1
End Function

Public Sub InitControls()
Dim dd
Dim i
Dim AControl As Control
  
  For Each AControl In Controls
    If TypeOf AControl Is TextBox Then AControl.Text = ""
    If TypeOf AControl Is TextBox Or TypeOf AControl Is ComboBox Then
      AControl.BackColor = vbWhite
      AControl.ForeColor = vbBlack
    End If
  Next
  
  IgnoreModify = True
  
  With SourceTerm
    txtPower = Format(.PlantPowerMwts, "000.0000")
    txtPower.Tag = "numeric"
    txtDelay = Format(.DelayTime, "0.0000")
    txtDelay.Tag = "numeric"
    txtStartTime = Format(.StartTime, "0.0000")
    txtStartTime.Tag = "numeric"
    
    dd = Max(CompartmentArr(1).Decay, .DecayDaughter)
    ' 0=nodecay; 1=nodaughter 2=decay and daughter products
    'optDD(dd) = True
    Select Case dd '11/17/05 - JCK
        Case 0
            chkDecay = vbUnchecked
            chkDaughtering = vbUnchecked
            chkDaughtering.Enabled = False
        Case 1
            chkDecay = vbChecked
            chkDaughtering = vbUnchecked
        Case 2
            chkDecay = vbChecked
            chkDaughtering = vbChecked
    End Select
    
    ' Iodine fractions
    With .SourceTermTable(1)
        If (.IFX(0) + .IFX(1) + .IFX(2) > 0) Then
           For i = 0 To 2
             txtIFX(i) = Format(.IFX(i), "0.0000")
           Next
        End If
    End With
  End With
    
  txtFraction.Visible = False
  DataModify = False
  IgnoreModify = False
  
End Sub

Public Property Get EditType() As String
   EditType = TheEditType
End Property

Public Property Let EditType(ByVal vNewValue As String)
  TheEditType = vNewValue
  PassFormEdit = DoFormEdit(Me, TheEditType)
End Property

Public Property Get PassFormEdit() As Boolean
  PassFormEdit = TheFormEdit
End Property

Public Property Let PassFormEdit(ByVal vNewValue As Boolean)
  
  TheFormEdit = vNewValue
  If Not TheFormEdit Then
    ShowErrorMessage EditType, "Source Term"
  End If
End Property

Public Function EditData() As Integer
Dim cancel As Integer
   
    cancel = 0
    EditType = "numeric"
    If PassFormEdit Then
        cancel = CheckTable()
    Else
        cancel = 1
    End If
    EditData = cancel
End Function

Private Function CheckTable()
Dim Buffer As String
Dim Msg As String
Dim NIF As Integer
Dim Reply As VbMsgBoxResult
Dim i As Long, j As Long

    txtFraction.Visible = False
    cboGridSelect.Visible = False
    
    With Grid
        For i = 1 To Grid.Rows - 1
            If .TextMatrix(i, 1) <> "" Then
                Buffer = .TextMatrix(i, 2)
                If Buffer = "" Then
                    Msg = "Missing multiplier"
                Else
                    If Not IsNumeric(Buffer) Then
                        Msg = "Non-numeric multiplier"
                    End If
                End If
                If Msg <> "" Then
                    Exit For
                End If
                If .TextMatrix(i, 3) = "" Then
                    Msg = "Missing inventory file"
                    Exit For
                End If
                NIF = NifID(.TextMatrix(i, 2))
                If NIF <> 2 Then
                    'Release file can only be blank for Ci/cc
                    If .TextMatrix(i, 4) = "" Then
                        Msg = "Missing release file"
                        Exit For
                    End If
                End If
            End If
            If Msg <> "" Then Exit For
        Next
        
        If Msg = "" Then
            CheckTable = 0
        Else
            Msg = Msg & vbCrLf & "Exit anyway?"
            Reply = MsgBox(Msg, vbInformation Or vbYesNo, "Entry Error")
            CheckTable = IIf(Reply = vbYes, 0, 1)
        End If
    End With
End Function

Private Sub Grid_Scroll()
    cboGridSelect.Visible = False
    txtFraction.Visible = False
End Sub

Private Sub txtDelay_Change()
    DataModify = True
End Sub

Private Sub txtDelay_GotFocus()
    'Save existing value
    PrevDelay = CSng(txtDelay)
    SetSelect txtDelay
End Sub

Private Sub txtFraction_Change()
    DataModify = True
End Sub

Private Sub txtFraction_GotFocus()
    SetSelect txtFraction
End Sub

Private Sub txtIFX_Change(Index As Integer)
  DataModify = True
End Sub

Private Sub txtIFX_GotFocus(Index As Integer)
  SetSelect txtIFX(Index)
End Sub

Private Sub txtIFX_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    Select Case KeyCode
        Case vbKeyDown
            If Index < 2 Then
                txtIFX(Index + 1).SetFocus
            Else
                txtIFX(0).SetFocus
            End If
        Case vbKeyUp
            If Index > 0 Then
                txtIFX(Index - 1).SetFocus
            Else
                txtIFX(2).SetFocus
            End If
    End Select
End Sub

Private Sub txtIFX_LostFocus(Index As Integer)
'Added for Version 3.10 JCK 11/2005
Dim Msg As String

    With Grid
        If .TextMatrix(.Row, 1) <> "" Then
            If IsNumeric(txtIFX(Index)) Then
                tmpIFX(.Row, Index) = CSng(txtIFX(Index))
            ElseIf txtIFX(Index) <> "" Then
                Msg = "Non-numeric "
                Select Case Index
                    Case 0
                        Msg = Msg & "Aerosol iodine fraction"
                    Case 1
                        Msg = Msg & "Elemental iodine fraction"
                    Case 2
                        Msg = Msg & "Organic iodine fraction"
                End Select
                
                MsgBox Msg, vbInformation, "Entry Error"
                SetSelect txtIFX(Index)
                txtIFX(Index).SetFocus
            End If
        End If
    End With
End Sub

Private Sub txtPower_Change()
    DataModify = True
End Sub

Private Sub txtStartTime_Change()
    DataModify = True
End Sub

Private Sub txtStartTime_GotFocus()
    SetSelect txtStartTime
End Sub

Private Sub txtPower_GotFocus()
    SetSelect txtPower
End Sub

Private Sub txtStartTime_LostFocus()
    If Not CheckStartTime() Then
        txtStartTime = txtDelay
        txtStartTime.SetFocus
        SetSelect txtStartTime
    End If
End Sub

Private Sub txtDelay_LostFocus()
Dim deltaDelay As Single
    
    If PrevDelay > 0 Then 'JCK 7/2006
        deltaDelay = val(txtDelay) - PrevDelay
        txtStartTime = Format(val(txtStartTime) + deltaDelay, TIMEFORM)
    End If
End Sub

Private Function CheckStartTime() As Boolean
    With SourceTerm
        If txtStartTime = "" Or txtDelay = "" Or val(txtStartTime) = 0 Then
            CheckStartTime = True
        ElseIf val(txtStartTime) < val(txtDelay) Then
            MsgBox "Start Time must be greater than or equal to Delay", _
                        vbInformation, "Entry Error"
            CheckStartTime = False
        Else
            CheckStartTime = True
        End If
    End With
End Function


'Private Sub ShowReleaseMode(Path As String)
''Set TID/1465 radio buttons
'Dim RftFile As TextStream
'Dim Buffer As String
'Dim Vars() As String
'Dim i As Integer

'On Error GoTo RftReadError

'    optVSB(0) = False
'    optVSB(1) = False
    
'    If Dir(Path) <> "" Then
'        Set RftFile = FSO.OpenTextFile(Path)
'        For i = 1 To 4
'            Buffer = RftFile.ReadLine
'        Next
'        Vars = Split(Trim(Buffer))
'        If val(Vars(0)) <= 0.25 Then
'            optVSB(0) = True
'        Else
'            optVSB(1) = True
'        End If
        
'        RftFile.Close
'        Exit Sub
'    End If
    
'RftReadError:
'    'MsgBox "Can't find " & Path, , "File Error"
'End Sub

